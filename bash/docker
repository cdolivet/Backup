#!/bin/bash

# Find docker image matching current path
function findDockerImageFromPath() {
  if [ "$1" = "test" ]; then
     # Test mode -> exclude non test containers
    GREP_CMD='grep test'
 else
    # No argument -> normal behaviour (exclude test containers)
    GREP_CMD='grep -v test'
  fi
  CurrentPath=`pwd`/

  # Works with both docker < 1.8 (using .Volumes) and docker >=1.8 (using .Mounts)
  docker inspect --format='{{$id := or .Name .Id}}{{range $mount := .Mounts}}{{$id}}:{{println $mount.Source}}{{end}}' $(docker ps -q) | sed '/^$/d' | eval $GREP_CMD |
  while read line; do

    VolumePath=`expr match "$line" "^[^:]\+:\(.*\)$"`/
    if (echo "$CurrentPath" | grep -q "$VolumePath") || (echo "$VolumePath" | grep -q "$CurrentPath"); then
      ContainerId=`expr match "$line" "^/\?\([^:]\+\):.*$"`
      RemainingPath=`expr match "$CurrentPath" "^$VolumePath\(.*\)$"`
      echo "$ContainerId:$VolumePath:$RemainingPath"
      return 0
    fi

  done;
  return 1
}

# Perform a docker exec on docker image matching current path
function dockerId() {
  res=`findDockerImageFromPath "$1"`
  echo `expr match "$res" "^\([^:]\+\):.*$"`
}

# Perform a docker exec on docker container matching current path
function dockerExec() {
  res=`findDockerImageFromPath`
  if [[ $? -ne 0 ]]; then
    echo 'No docker container found matching current path';
    return 1
  fi

  ContainerId=`expr match "$res" "^\([^:]\+\):.*$"`
  Cmd=`echo docker exec -it $ContainerId bash -ic \"$@\"`

  echo -e "\e[2m> $Cmd\e[0m"
  eval $Cmd
}

# Perform a docker exec on docker test container matching current path
function dockerTestExec() {
  res=`findDockerImageFromPath "test"`
  if [[ $? -ne 0 ]]; then
    echo 'No test docker container found matching current path';
    return 1
  fi

  ContainerId=`expr match "$res" "^\([^:]\+\):.*$"`
  Cmd=`echo docker exec -it $ContainerId bash -ic \"$@\"`

  echo -e "\e[2m> $Cmd\e[0m"
  eval $Cmd
}

# Perform a docker exec on docker image matching current path with all input " ." being replaced by corresponding relative path regarding
function dockerExecRel() {
  res=`findDockerImageFromPath`
  if [[ $? -ne 0 ]]; then
    echo 'No docker container found matching current path';
    return 1
  fi

  ContainerId=`expr match "$res" "^\([^:]\+\):.*$"`
  SubPath=`expr match "$res" "^.*:\([^:]\+\)$"`
  [[ "$SubPath" = "" ]] && SubPath="." || SubPath="$SubPath"
  Cmd=`echo docker exec -it $ContainerId bash -ic \"$@\" | sed -r "s/(\\"| )\\./\1${SubPath//\//\\\/}/"`

  echo -e "\e[2m> $Cmd\e[0m"
  eval $Cmd
}

# Perform a docker exec on docker image matching current path with all input " ." being replaced by corresponding relative path regarding
function dockerTestExecRel() {
  res=`findDockerImageFromPath "test"`
  if [[ $? -ne 0 ]]; then
    echo 'No docker container found matching current path';
    return 1
  fi

  ContainerId=`expr match "$res" "^\([^:]\+\):.*$"`
  SubPath=`expr match "$res" "^.*:\([^:]\+\)$"`
  [[ "$SubPath" = "" ]] && SubPath="." || SubPath="$SubPath"
  Cmd=`echo docker exec -it $ContainerId bash -ic \"$@\" | sed -r "s/(\\"| )\\./\1${SubPath//\//\\\/}/"`

  echo -e "\e[2m> $Cmd\e[0m"
  eval $Cmd
}


alias d="docker exec -it \`dockerId\` bash"
alias dt="docker exec -it \`dockerId "test"\` bash"
alias de="dockerExecRel"
alias dte="dockerTestExecRel"
alias dip='docker inspect --format "{{ .NetworkSettings.IPAddress }}"'

# Stop all docker images
alias docker-stop='docker rm -vf $(docker ps -qa)'

# Delete all unused images layers & stopped containers
alias docker-flush='docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null && docker rm $(docker ps -a -f status=exited -q)'

# Docker host ip
alias docker-host-ip='ip route | grep docker |  sed -e "s/.* src //" | tr -d " "'

#alias docker-registry-images="curl -Ls http://$DOCKER_REGISTRY/v1/search | grep -Eo '\"name\":\s*\"[^\"]+\"' | awk -F'\"' '{print \$4}' | column"
#alias docker-registry-image-tags="curl -Ls http://$DOCKER_REGISTRY/v1/%repository/namespace%/tags"
